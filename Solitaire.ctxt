#BlueJ class context
comment0.target=Solitaire
comment0.text=\n\ Solitaire\ class\ which\ makes\ up\ the\ game\ Solitaire\ \n\ \n\ @author\ Amiya\ Chokhawala\ \n\ @version\ January\ 6,\ 2022\ \n
comment1.params=args
comment1.target=void\ main(java.lang.String[])
comment1.text=\n\ @param\ args\ main\ method\ parameter\n
comment10.params=
comment10.target=void\ deal()
comment10.text=\n\ Moves\ the\ right\ amount\ of\ cards\ to\ 7\ piles\ from\ the\ stock\n
comment11.params=
comment11.target=void\ dealThreeCards()
comment11.text=\n\ Moves\ up\ to\ 3\ cards\ from\ the\ stock\ to\ the\ waste\n
comment12.params=
comment12.target=void\ resetStock()
comment12.text=\n\ Moves\ all\ cards\ back\ from\ the\ waste\ to\ stock\n
comment13.params=
comment13.target=void\ stockClicked()
comment13.text=\n\ Invoked\ when\ stock\ is\ clicked.\ \n\ It\ either\ moves\ up\ to\ 3\ cards\ to\ waste.\ If\ stock\ is\ empty,\ reset\ the\ stock.\n
comment14.params=
comment14.target=void\ wasteClicked()
comment14.text=\n\ Called\ when\ the\ waste\ is\ clicked\n\ Invoked\ when\ waste\ is\ clicked.\ It\ toggles\ between\ selected\ and\ not-selected.\n
comment15.params=index
comment15.target=void\ foundationClicked(int)
comment15.text=\n\ @precondition\:\ 0\ <\=\ index\ <\ 4\n\ @postcondition\:\ Invoked\ when\ any\ foundation\ is\ clicked.\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Card\ is\ moved\ from\ either\ the\ pile\ or\ waste\ to\ foundation,\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ depending\ on\ what\ is\ alredy\ selected.\ Also,\ it\ checks\ if\ move\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ meets\ the\ conditions\ of\ moving\ to\ the\ foundation.\n\ @param\ index\ the\ index\ of\ the\ stack\ of\ cards\n
comment16.params=index
comment16.target=void\ pileClicked(int)
comment16.text=\n\ @precondition\:\ 0\ <\=\ index\ <\ 7\n\ @postcondition\:\ Invoked\ when\ any\ pile\ is\ clicked.\ If\ it\ is\ first\ click,\ it\ selects\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ pile.\ If\ it\ is\ second\ click\ (i.e.\ another\ pile\ is\ already\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ selected,\ it\ will\ move\ all\ faceup\ cards\ from\ selected\ pile\ to\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ clicked\ pile\ -\ after\ checking\ if\ it\ is\ legal\ to\ move.\n\ @param\ index\ the\ index\ of\ the\ stack\ of\ cards\n
comment17.params=card\ index
comment17.target=boolean\ canAddToPile(Card,\ int)
comment17.text=\n\ @precondition\ 0\ <\=\ index\ <\ 7\n\ @postcondition\ Returns\ true\ if\ the\ given\ card\ can\ be\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ legally\ moved\ to\ the\ top\ of\ the\ given\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ pile\n\ @return\ true\ if\ card\ can\ be\ added\ to\ the\ pile;\ else\ false\n\ @param\ card\ the\ card\ of\ which\ this\ method\ is\ determining\ whether\ it\ can\ be\ added\ or\ not\n\ @param\ index\ the\ index\ of\ which\ pile\ stack\ it\ is\ checking\ for\n
comment18.params=index
comment18.target=java.util.Stack\ removeFaceUpCards(int)
comment18.text=\n\ @precondition\:\ 0\ <\=\ index\ <\ 7\n\ @postcondition\:\ Removes\ all\ face-up\ cards\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ on\ the\ top\ of\ the\ given\ pile;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ returns\ a\ stack\ containing\ these\ cards\n
comment19.params=cards\ index
comment19.target=void\ addToPile(java.util.Stack,\ int)
comment19.text=\n\ @precondition\:\ 0\ <\=\ index\ <\ 7\n\ @postcondition\:\ Removes\ elements\ from\ cards,\ and\ adds\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ them\ to\ the\ given\ pile.\n
comment2.params=
comment2.target=Solitaire()
comment2.text=\n\ Constructor\ for\ the\ Solitaire\ class\n
comment20.params=card\ index
comment20.target=boolean\ canAddToFoundation(Card,\ int)
comment20.text=\n\ @precondition\:\ 0\ <\=\ index\ <\ 4\n\ @postcondition\:\ Returns\ true\ if\ the\ given\ card\ can\ be\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ legally\ moved\ to\ the\ top\ of\ the\ given\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ foundation\n
comment3.params=
comment3.target=Card\ getStockCard()
comment3.text=\n\ @return\ the\ card\ on\ top\ of\ the\ stock,\n\ \ \ \ \ \ \ \ \ or\ null\ if\ the\ stock\ is\ empty\n
comment4.params=
comment4.target=Card\ getWasteCard()
comment4.text=\n\ @return\ the\ card\ on\ top\ of\ the\ waste,\n\ or\ null\ if\ the\ waste\ is\ empty\n
comment5.params=index
comment5.target=Card\ getFoundationCard(int)
comment5.text=\n\ @precondition\:\ \ 0\ <\=\ index\ <\ 4\n\ @postcondition\:\ returns\ the\ card\ on\ top\ of\ the\ given\n\ foundation,\ or\ null\ if\ the\ foundationis\ empty\n\ \n\ @return\ card\ the\ card\ at\ the\ top\ of\ the\ foundation\ stack\ at\ the\ index\ \n\ @param\ index\ the\ index\ of\ the\ foundation\ stack\n
comment6.params=index
comment6.target=java.util.Stack\ getPile(int)
comment6.text=\n\ @precondition\:\ 0\ <\=\ index\ <\ 7\n\ @postcondition\:\ Returns\ a\ reference\ to\ the\ given\ pile.\n\ \n\ @return\ the\ stack\ of\ card\ of\ the\ type\ which\ has\ a\ stack\ of\ cards\n\ @param\ index\ the\ index\ of\ which\ piles'\ stack\n
comment7.params=
comment7.target=void\ createStockDemo()
comment7.text=\n\ createStock()\ to\ help\ Debug\ and\ Test\ \n
comment8.params=
comment8.target=void\ createStock()
comment8.text=\n\ Replenish\ the\ stock\ with\ the\ randomly\ shuffled\ cards\n
comment9.params=
comment9.target=void\ dealDemo()
comment9.text=\n\ deal()\ to\ help\ Debug\ and\ Test\ \n
numComments=21
